<?xml version="1.0" encoding="utf-8"?>
<!-- 
/**
 * test.xml
 * Ant 1.3.x build script for compiling and running Xalan-J tests.  
 * 
 * Note that this is a slightly unusual Ant build.xml file, since we 
 * support both compiling/packaging the Xalan-J tests themselves, as 
 * well as a number of targets designed to execute the tests once 
 * they're built.
 *
 * In general the compilation targets (i.e. ones that compile the 
 * test classes themselves) do list their dependencies explicitly.
 * Targets that serve to execute tests do not normally list any 
 * dependencies - users must manually 'build jar' first.
 *
 * @author shane_curcuru@lotus.com
 * @see build.bat
 */
-->

<project name="testxsl" default="jar" basedir=".">

<!-- Installation, usage instructions TBD -sc -->

    <!-- ================================================================== -->
    <!-- Initialize: define various properties about locations, jars, etc.  -->
    <!-- ================================================================== -->
    <!-- First, read in the user's own default properties, if they exist -->
    <property file="my.test.properties" />
    <!-- Then, read in the default checked-in properties -->
    <property file="test.properties" />

    <!-- Also provide environment properties with a special prefix which 
         allows us to detect if JARDIR is set.
   -->
    <property environment="ENV" />

    <property name="name" value="testxsl"/>
    <property name="Name" value="Testxsl"/>
    <property name="year" value="2000-2001"/>
    <property name="copyright" value="Copyright &#169; ${year} The Apache Software Foundation.  All rights reserved."/>
    <property name="javadocs.packages" 
              value="org.apache.qetest,org.apache.qetest.xslwrapper,org.apache.qetest.xsl,org.apache.qetest.trax,org.apache.qetest.trax.dom,org.apache.qetest.trax.sax,org.apache.qetest.trax.stream,org.apache.qetest.xalanj2"/>

    <!-- Properties related to compiling the tests -->
    <property name="build.compiler" value="classic"/>
    <property name="compiler" value="${build.compiler}"/>
    <property name="debug" value="on"/>

    <!-- Specific locations related to building test code/docs -->
    <property name="test.src.dir" value="java/src"/>
    <property name="test.root" value="org/apache/qetest/"/>
    <property name="test.dir" value="${test.src.dir}/${test.root}"/>
    <property name="test.build.dir" value="java/build"/>
    <property name="test.build.docs" value="${test.build.dir}/docs"/>
    <property name="test.build.apidocs" value="${test.build.docs}/apidocs"/>
    <property name="tests.bugzilla.dir" value="tests/bugzilla"/>
    <property name="tests.bugzilla.build.dir" value="tests/bugzilla/build"/>
    <property name="tests.extensions.dir" value="${extensions.inputDir}/java"/>
    <property name="tests.extensions.build.dir" value="${extensions.inputDir}/java/build"/>
    
    <!-- Names/locations of .jar files we build -->
    <property name="testxsl.jar.name" value="testxsl.jar"/>
    <property name="qetest.jar.name" value="qetest.jar"/>
    <property name="testxsl.jar" value="${test.build.dir}/${testxsl.jar.name}"/>
    <property name="qetest.jar" value="${test.build.dir}/${qetest.jar.name}"/>

    <!-- Specific locations related to Xalan code, which should be in a sister tree to us -->
    <property name="xalan.relpath" value="../java"/>
    <property name="xalan.bin.dir" value="${xalan.relpath}/bin"/> 
    <property name="xalan.build.dir" value="${xalan.relpath}/build"/> 
    <property name="xalan.xdocs.dir" value="${xalan.relpath}/xdocs"/>
    <property name="xalan.generator.styletargz" value="${xalan.xdocs.dir}/xml-site-style.tar.gz"/>

    <!-- Various names/locations of dependent jars -->
    <property name="xalan.jar" value="${xalan.build.dir}/xalan.jar"/>
    <property name="xerces.jar" value="${xalan.bin.dir}/xerces.jar"/>
    <property name="bsf.jar" value="${xalan.bin.dir}/bsf.jar"/>
    <!-- The js.jar is for Javascript extensions tests; you must 
         get this .jar yourself.  Feel free to reset the location.
    -->
    <property name="js.jar" value="../../js.jar"/>

    <!-- Documentation-specific files and locations -->
    <property name="stylebook.jar" value="${xalan.bin.dir}/stylebook-1.0-b3_xalan-2.jar"/>
    <property name="doclet.jar" value="${xalan.bin.dir}/xalan2jdoc.jar"/>
    <property name="test.xdocs.dir" value="java/xdocs"/>
    <property name="test.generator.styletar" value="${test.xdocs.dir}/xml-site-style.tar"/>
    <property name="test.xdocs.book" value="${test.xdocs.dir}/sources/xalantest.xml"/>
    <property name="test.xdocs.style" value="${test.xdocs.dir}/style"/>
    <property name="doc.generator" value="org.apache.stylebook.StyleBook"/>
    <path id="test.docs.class.path">
        <pathelement location="${bsf.jar}" />
        <pathelement location="${stylebook.jar}" />
        <pathelement location="${doclet.jar}" />
        <pathelement location="${xalan.jar}" />
        <pathelement path="${java.class.path}" />
    </path>

    <!-- Note: given that many of the tests interact with xerces and 
         xalan classes, and that Ant may use these classes (especially parser 
         ones) I've found it's best to fork the tests.
         Later I'd like to give the user the option to fork or not, since 
         while forking is slower and problematic on some systems, it is 
         also a safer testing environment (since the Ant classes and the 
         parser aren't already loaded, etc.)
    --> 
    <property name="fork-tests" value="yes"/>
    <!-- Property to have the Ant build fail when a test has an 
         error (not necessarily a fail).  Needs improvement.
    --> 
    <property name="fail-on-error" value="yes"/>

    <!-- ================================================================== -->
    <!-- Initialize: define classpaths for use within specific targets      -->
    <!-- ================================================================== -->
    <!-- Classpath used when compiling tests -->
    <path id="compiletest.class.path">
        <pathelement path="${java.class.path}" />
        <pathelement location="${xalan.jar}" />
        <pathelement location="${xerces.jar}" />
    </path>

    <!-- Classpath used when running API tests -->
    <path id="api.class.path">
        <pathelement path="${java.class.path}" />
        <pathelement location="${xalan.jar}" />
        <pathelement location="${xerces.jar}" />
        <pathelement location="${testxsl.jar}" />
    </path>

    <!-- Classpath used when running conf or conformance tests -->
    <path id="conf.class.path">
        <pathelement path="${java.class.path}" />
        <pathelement location="${xalan.jar}" />
        <pathelement location="${xerces.jar}" />
        <pathelement location="${testxsl.jar}" />
    </path>

    <!-- Classpath used when running perf or performance tests -->
    <path id="perf.class.path">
        <path refid="conf.class.path" />
    </path>

    <!-- Classpath used when running contrib or user-contributed tests -->
    <path id="contrib.class.path">
        <path refid="conf.class.path" />
    </path>

    <!-- Classpath used when running Bugzilla tests -->
    <path id="bugzilla.class.path">
        <path refid="api.class.path" />
        <pathelement location="${tests.bugzilla.build.dir}" />
    </path>

    <!-- Classpath used when running extensions tests -->
    <path id="extensions.class.path">
        <path refid="api.class.path" />
        <pathelement location="${bsf.jar}" />
        <pathelement location="${js.jar}" />
        <pathelement location="${tests.extensions.build.dir}" />
        <!-- Add more pathelements if we add more Java extensions dirs -->        
    </path>

    <!-- ================================================================== -->
    <!-- Initialize: Define an Ant task that executes Xalan test automation -->
    <!-- ================================================================== -->
    <taskdef name="xalantest" classname="org.apache.qetest.xsl.XSLTestAntTask">
        <classpath>
            <pathelement path="${java.class.path}" />
            <!-- Needed so this build file can run: this refers to 
                 a precompiled version of XSLTestAntTask.class that 
                 is checked in: normally at runtime, it should come 
                 from the testxsl.jar file instead of below.
           -->
            <pathelement location="${test.src.dir}" />
            <pathelement location="${testxsl.jar}" />
        </classpath>
    </taskdef>

    <!-- ================================================================== -->
    <!-- Initialize: setup for compiling, doc building, running tests       -->
    <!-- ================================================================== -->
    <target name="init.test"
        description="Prepare timestamp, echo JARDIR for debugging">
        <!-- Note this is case-sensitive, even on Windows! -->
        <echo message="Your ==JARDIR== is set to ==${ENV.JARDIR}==" />
        <tstamp />
        <!-- Note this is used when styling results files from tests to html. -->
        <available classname="org.apache.tools.ant.taskdefs.optional.XalanLiaison" property="xalan-liaison" />
    </target>

    <target name="init.build" depends="init.test"
        description="Prepare build output tree, copy prebuilts">
        <echo message="JVM Classpath is ${java.class.path}" />
        <mkdir dir="${test.build.dir}" />
        <mkdir dir="${test.build.dir}/${test.root}" />
        <!-- Also copy over precompiled external processor wrapper classes -->
        <copy todir="${test.build.dir}/${test.root}/xslwrapper" >
            <fileset dir="${test.dir}xslwrapper">
                <include name="**/*.class" />
                <include name="**/*.properties" />
            </fileset>
        </copy>
    </target>
         
    <target name="init.docs" depends="init.build"
        description="Prepare output tree for documentation">
        <mkdir dir="${test.build.apidocs}" />
        <!-- Copy the Xalan-specific version of doc files and untargz them -->
        <gunzip src="${xalan.generator.styletargz}" dest="${test.generator.styletar}"/>
        <untar src="${test.generator.styletar}" dest="${test.xdocs.dir}"/>
        <delete file="${test.generator.styletar}"/>
    </target>


    <!-- ================================================================== -->
    <!-- Run tests: the normal StylesheetTestletDriver on the conf suite    -->
    <!-- ================================================================== -->
    <target name="conf" description="Run TestletDriver over the conf tree"
        depends="init.test">
        <!-- Set the default conformance test driver, user may override -->
        <property name="testClass" value="org.apache.qetest.xsl.StylesheetTestletDriver" />
        <echo message="Executing Xalan conf test: ${testClass}" />
        <property name="testType" value="conf." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="conf.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}" />
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: the normal StylesheetTestletDriver on the perf suite    -->
    <!-- ================================================================== -->
    <target name="perf" description="Run TestletDriver over the perf tree"
        depends="init.test">
        <!-- Set the default conformance test driver, user may override -->
        <property name="testClass" value="org.apache.qetest.xsl.StylesheetTestletDriver" />
        <echo message="Executing Xalan perf test: ${testClass}" />
        <property name="testType" value="perf." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="perf.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}" />
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: the normal StylesheetTestletDriver on the contrib suite -->
    <!-- ================================================================== -->
    <target name="contrib" description="Run TestletDriver over the contrib tree"
        depends="init.test">
        <!-- Set the default conformance test driver, user may override -->
        <property name="testClass" value="org.apache.qetest.xsl.StylesheetTestletDriver" />
        <echo message="Executing Xalan contrib test: ${testClass}" />
        <property name="testType" value="contrib." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="contrib.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}" />
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: a specific named API test                               -->
    <!-- ================================================================== -->
    <target name="api" description="Run a specific API test"
        depends="init.test">
        <!-- Note no default is set; also testClass is not prefixed! -->
        <echo message="Executing Xalan api test: ${testClass}" />
        <property name="testType" value="api." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="api.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}" />
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: Run all available API tests                             -->
    <!-- ================================================================== -->
    <target name="harness" description="Run all available API tests">
        <antcall target="api">
            <param name="testClass" value="org.apache.qetest.xsl.XSLTestHarness"/>
            <param name="qetest.tests" value="${harness.tests}"/>
            <!-- Below line is in case we run ThreadedTestletDriver -->
            <param name="qetest.testlet" value="${harness.threads.testlet}"/>
            <param name="qetest.fileList" value="${harness.threads.fileList}"/>
        </antcall>
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: all Bugzilla testlets to regress bugs                   -->
    <!-- ================================================================== -->
    <target name="bugzilla" description="Run all Bugzilla Testlets and tests to regress bugs"
        depends="init.test">
        <echo message="Run all Bugzilla Testlets and tests to regress bugs" />
        <!-- Set the default conformance test driver, user may override -->
        <property name="testClass" value="org.apache.qetest.xsl.BugzillaTestletDriver" />
        <property name="testType" value="bugzilla." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="bugzilla.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}" />
        <echo message="If you got ClassNotFound, did you 'build bugzilla.classes' first?" />
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: various extensions tests using driver                    -->
    <!-- ================================================================== -->
    <target name="extensions" description="Run various extensions tests using driver"
        depends="init.test">
        <echo message="Run various extensions tests using driver" />
        <!-- Set the default conformance test driver, user may 
             override; note test.properties:extensions.testlet= 
        -->
        <property name="testClass" value="org.apache.qetest.xsl.StylesheetTestletDriver" />
        <property name="testType" value="extensions." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="extensions.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}" />
        <echo message="If you got ClassNotFound, did you 'build extensions.classes' first?" />
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: Run the Xalan-J 2.x Minitest                            -->
    <!-- ================================================================== -->
    <!-- This target doesn't actually do anything itself - it merely 
         depends on other targets, in order, to first run the whole 
         Minitest, then to log to Ant whether the test didn't pass 
         (i.e. failed, incomplete, error or ambiguous) or passed.
    -->
    <target name="minitest" 
            description="Run the Xalan-J 2.x Minitest"
            depends="minitest-execute,minitest-notpass,minitest-pass">
    </target>

    <target name="minitest-execute">
        <echo message="About to execute the Minitest..." />
        <antcall target="api">
            <param name="testClass" value="org.apache.qetest.trax.Minitest"/>
            <param name="testType" value="minitest."/>
        </antcall>
        <available file="${minitest.passFile}" property="minitest-passed" />
    </target>
    <target name="minitest-notpass" unless="minitest-passed">
        <echo message=" [minitest] ERROR! The Minitest failed!" />
        <echo message=" [minitest] See details in ${minitest.logFile}, output is in ${minitest.outputDir}" />
        <echo message=" [minitest] Please fix any Minitest problems before checking in!" />
        <fail message="Please fix any Minitest problems before checking in!" />
    </target>
    <target name="minitest-pass" if="minitest-passed">
        <echo message=" [minitest] CONGRATULATIONS! The Minitest passed!" />
        <echo message=" [minitest] See details in ${minitest.logFile}" />
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: Run the Xalan-J 2.x Smoketest, including several tests  -->
    <!-- Note: this target is frequently called from outside of this file!  -->
    <!-- ================================================================== -->
    <target name="smoketest" 
            description="Run the Xalan-J 2.x Smoketest"
            depends="minitest-execute,smoketest-execute,minitest-notpass,minitest-pass,smoketest-conf-notpass,smoketest-conf-pass,smoketest-api-notpass,smoketest-api-pass">
    </target>
    <target name="smoketest.gump" 
            description="Run the Xalan-J 2.x Smoketest in automated builds with dependencies"
            depends="jar,minitest-execute,smoketest-execute,minitest-notpass,minitest-pass,smoketest-conf-notpass,smoketest-conf-pass,smoketest-api-notpass,smoketest-api-pass,smoketest-results-dist">
    </target>

    <target name="smoketest-execute">
        <echo message="About to execute Conformance tests..." />
        <antcall target="conf">
            <param name="testType" value="smoketest.conf."/>
        </antcall>
        <available file="${smoketest.conf.passFile}" property="smoketest-conf-passed" />

        <echo message="About to execute other API tests..." />
        <antcall target="api">
            <param name="testClass" value="org.apache.qetest.xsl.XSLTestHarness"/>
            <param name="testType" value="smoketest.api."/>
        </antcall>
        <available file="${smoketest.conf.passFile}" property="smoketest-conf-passed" />
    </target>
    <target name="smoketest-conf-notpass" unless="smoketest-conf-passed">
        <echo message=" [minitest] ERROR! The Smoketest-conf failed!" />
        <echo message=" [minitest] See details in ${smoketest.conf.logFile}, output is in ${smoketest.conf.outputDir}" />
        <echo message=" [minitest] Please fix any conformance problems before checking in!" />
        <fail message="Please fix any conformance problems before checking in!" />
    </target>
    <target name="smoketest-conf-pass" if="smoketest-conf-passed">
        <echo message=" [minitest] CONGRATULATIONS! The Smoketest-conf passed!" />
        <echo message=" [minitest] See details in ${smoketest.conf.logFile}" />
    </target>
    <target name="smoketest-api-notpass" unless="smoketest-api-passed">
        <echo message=" [minitest] ERROR! The Smoketest-api failed!" />
        <echo message=" [minitest] See details in ${smoketest.api.logFile}, output is in ${smoketest.api.outputDir}" />
        <echo message=" [minitest] Please fix any API test problems before checking in!" />
        <fail message="Please fix any API test problems before checking in!" />
    </target>
    <target name="smoketest-api-pass" if="smoketest-api-passed">
        <echo message=" [minitest] CONGRATULATIONS! The Smoketest-api passed!" />
        <echo message=" [minitest] See details in ${smoketest.api.logFile}" />
    </target>

    <target name="smoketest-results-dist" if="smoketest.results.dist" depends="init.test">
        <!-- Create a cheap .zip file of just the results from the smoketest -->
        <zip zipfile="${test.build.dir}/smoketest-results-${DSTAMP}.zip" 
             includes="xml-xalan/test/smoketest/"
             basedir="../.."
             />
    </target>

    <!-- ================================================================== -->
    <!-- Build Tests: Compile/jar targets for each 'layer' of testing code  -->
    <!-- ================================================================== -->
    <target name="compile.qetest" depends="init.build"
        description="Compile base qetest files; no Xalan dependencies">
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}*.java" 
               debug="${debug}" />
    </target>

    <target name="jar.qetest" depends="compile.qetest"
        description="Jar base qetest files; no Xalan dependencies">
        <jar jarfile="${qetest.jar}" 
             basedir="${test.build.dir}" 
             includes="${test.root}*.java,${test.root}*.properties" />
    </target>


    <!-- This step should be dependent upon general XML/XSL 
         functionality like SAX, DOM, JAXP and the like, but 
         should not directly depend on Xalan 
   -->
    <target name="compile.xsl" depends="compile.qetest"
        description="Compile TransformWrapper and associated classes">
        <!-- This javac has no dependencies -->
        <!-- @deprecated ProcessorWrapper.java to be removed! -->
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}xslwrapper/ProcessorWrapper.java,${test.root}xslwrapper/TransformWrapperHelper.java,${test.root}xslwrapper/TransformWrapper.java,${test.root}xslwrapper/TransformWrapperFactory.java"
               debug="${debug}" />
        <!-- This javac depends on JAXP, SAX, DOM; hence the specific classpathref -->
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}xsl/*.java"
               debug="${debug}" 
               classpathref="compiletest.class.path" />
    </target>

    <target name="compile.trax.xslwrappers" depends="compile.xsl"
        description="Compile Trax*Wrapper xslwrappers only">
        <!-- Should only be dependent on JAXP, not Xalan specifically -->
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}xslwrapper/Trax*Wrapper.java,${test.root}xslwrapper/TraxWrapperUtils.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
    </target>

    <target name="compile.trax" depends="compile.xsl,compile.trax.xslwrappers"
        description="Compile various JAXP-based API tests">
        <!-- Should only be dependent on JAXP, not Xalan specifically -->
        <!-- Separate javac steps to avoid compiler oddities -->
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}trax/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}trax/stream/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}trax/dom/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}trax/sax/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
    </target>

    <target name="compile" depends="compile.trax">
        <echo message="Compile Xalan-J 2.x specific tests" />
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}xalanj2/*.java"
               debug="${debug}"
               classpathref="compiletest.class.path" />
    </target>

    <target name="jar" depends="compile"
        description="Build testxsl.jar with all available tests">
        <jar jarfile="${testxsl.jar}" 
             basedir="${test.build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>

    <!-- excludes="Bugzilla1288.java"; test refers to removed classes -->
    <target name="bugzilla.classes" depends="jar"
        description="Compile any bugzilla testlet classes">
        <mkdir dir="${tests.bugzilla.build.dir}" />
        <javac srcdir="${tests.bugzilla.dir}" 
               destdir="${tests.bugzilla.build.dir}" 
               debug="${debug}"
               excludes="Bugzilla1288.java"
               classpathref="bugzilla.class.path" />
    </target>

    <target name="extensions.classes" depends="jar"
        description="Compile any extensions test classes">
        <mkdir dir="${tests.extensions.build.dir}" />
        <javac srcdir="${tests.extensions.dir}" 
               destdir="${tests.extensions.build.dir}" 
               debug="${debug}"
               classpathref="extensions.class.path" />
        <!-- Add more javac calls if we add more Java extensions dirs -->        
    </target>

    <!-- This target compiles both the main tests and test drivers 
         in testxsl.jar from the java/ directory, as well as 
         various other classes in subdirs under tests/
    -->
    <target name="all" description="Build testxsl.jar *and* compile .java under tests/ dir"
        depends="jar,bugzilla.classes,extensions.classes">
    </target>

    <target name="clean"
        description="Clean up the compiled tests and docs">
        <delete dir="${test.build.dir}"/>
        <delete dir="${tests.bugzilla.build.dir}"/>
        <delete dir="${tests.extensions.build.dir}"/>
        <delete dir="${xdocs.style}"/> <!-- init.build.docs creates this tree -->
    </target>


    <!-- ================================================================== -->
    <!-- Build docs: Creates the User's Guide                               -->
    <!-- ================================================================== -->
    <target name="docs" depends="init.docs"
        description="Build the framework/overview docs for tests">
        <java fork="yes" 
            classname="${doc.generator}" 
            classpathref="test.docs.class.path" >
            <arg line="targetDirectory=${test.build.docs} ${test.xdocs.book} ${test.xdocs.style}"/>
        </java>	 
    </target>

    <!-- ================================================================== -->
    <!-- Build docs: Creates the Javadoc API documentation                  -->
    <!-- ================================================================== -->
    <target name="javadocs" depends="init.docs"
        description="Build the Javadocs for tests">
            
        <!-- Ant 1.2 ignores destdir arg if doclet is set, so must send to doclet in doclet subelement dleslie-->    
        <!-- But: Ant 1.3 fails if you *don't* provide destdir attr... curcuru-->    
        <javadoc
             classpath="${java.class.path};${xalan.jar}"
             sourcepath="${test.src.dir}"
             packagenames="${javadocs.packages}"
             protected="true"
             author="true"
             version="true"
             use="true"
             windowtitle="${Name}" 
             doctitle="${Name}"
             bottom="${copyright}"
             destdir="${test.build.apidocs}">
               <doclet name="xalanjdoc.Standard" path="${doclet.jar}">
                  <param name="-d" value="${test.build.apidocs}"/>
               </doclet>             
        </javadoc>
    </target>


    <!-- =================================================================== -->
    <!-- Build distribution - simple zip/tar.gz for sharing tests            -->
    <!-- =================================================================== -->
    <target name="dist" depends="all,docs,javadocs"
        description="Build a simple distribution module">
        <echo message="Subject to change! Just a simple way to zip it all up for now" />
        <!-- Zip just the xml/xsl/out test files -->
        <zip zipfile="${test.build.dir}/xalan-tests-${DSTAMP}.zip" 
             excludes="**/*.zip"
             includes="test/tests/"
             basedir=".."
             />
        <!-- Zip the automation and batch files, etc. -->
        <zip zipfile="${test.build.dir}/xalan-automation-${DSTAMP}.zip" 
             excludes="**/*.zip"
             includes="test/*.*,test/java/"
             basedir=".." 
             />
    </target>


    <!-- ================================================================== -->
    <!-- Special: Targets specific to XSLTC which requires extra .jars      -->
    <!-- This section will be updated as xsltc integrates more with xalan   -->
    <!-- ================================================================== -->
    <!-- Actually, I'd like to figure out some sneaky Ant trick to 
         allow swapping of parts of classpaths (i.e. swap in xsltc.jar 
         and related files instead of xalan.jar; likewise replace 
         xerces.jar with the PARSER_JAR defined outside) to clean 
         this section up.  But for the time being I'm planning on 
         simply maintaining separate-but-equal targets.xsltc
    -->

    <path id="xsltc.runtime.class.path">
        <pathelement path="${java.class.path}" />
        <pathelement location="${xalan.build.dir}/xsltc.jar" />
        <pathelement location="${xalan.bin.dir}/BCEL.jar" />
        <pathelement location="${xalan.bin.dir}/JLex.jar" />
        <pathelement location="${xalan.bin.dir}/java_cup.jar" />
        <pathelement location="${xalan.bin.dir}/runtime.jar" />
        <pathelement location="${testxsl.jar}" />
        <pathelement location="${xerces.jar}" />
        <pathelement location="${xalan.jar}" />
    </path>
    <!-- xsltc-folk: are these the correct classpaths needed? -->
    <path id="xsltc.compile.class.path">
        <pathelement path="${java.class.path}" />
        <pathelement location="${xalan.build.dir}/xsltc.jar" />
        <pathelement location="${xalan.bin.dir}/BCEL.jar" />
        <pathelement location="${xalan.bin.dir}/JLex.jar" />
        <pathelement location="${xalan.bin.dir}/java_cup.jar" />
        <pathelement location="${xalan.bin.dir}/runtime.jar" />
        <pathelement location="${testxsl.jar}" />
        <pathelement location="${xerces.jar}" />
        <pathelement location="${xalan.jar}" />
        <!-- Note addition of . to the classpath to enable loading 
             of translets; this needs more work and coordination 
             with tests and translet output dirs.
        -->
        <pathelement location="." />
    </path>

    <target name="compile.xsltc.xslwrappers" depends="compile.xsl"
        description="Compile Xsltc*Wrapper xslwrappers only">
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}xslwrapper/Xsltc*Wrapper.java,${test.root}xslwrapper/TraxWrapperUtils.java"
               debug="${debug}">
            <classpath refid="xsltc.compile.class.path" />
        </javac>               
    </target>

    <target name="compile.xsltc" depends="compile.xsltc.xslwrappers"
        description="Compile xsltc native API tests only">
        <javac srcdir="${test.src.dir}" 
               destdir="${test.build.dir}" 
               includes="${test.root}xsltc/*.java"
               debug="${debug}">
            <classpath refid="xsltc.compile.class.path" />
        </javac>               
    </target>

    <target name="jar.xsltc" depends="compile.xsltc"
        description="Build testxsl.jar with xsltc-specific tests">
        <jar jarfile="${test.build.dir}/${testxsl.jar.name}" 
             basedir="${test.build.dir}" 
             includes="**/*.class,**/*.properties" />
    </target>

    <target name="conf.xsltc" description="Run TestletDriver over the conf tree using xsltc">
        <!-- Set the default conformance test driver, user may override -->
        <property name="testClass" value="org.apache.qetest.xsl.StylesheetTestletDriver" />
        <echo message="Executing Xalan-xsltc conf test: ${testClass}" />
        <!-- Special: allow explicit test.properties overrides for inputDir, etc for xsltc -->
        <property name="testType" value="conf.xsltc." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="xsltc.runtime.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}">
            <!-- Explicitly set TransformerFactory property to use xsltc -->
            <sysproperty key="javax.xml.transform.TransformerFactory" value="org.apache.xalan.xsltc.trax.TransformerFactoryImpl"/>
        </xalantest>
    </target>

    <!-- ================================================================== -->
    <!-- Run tests: a specific named API test with xsltc code               -->
    <!-- ================================================================== -->
    <target name="api.xsltc" description="Run a specific API test with xsltc code"
        depends="init.test">
        <!-- Note no default is set; also testClass is not prefixed! -->
        <echo message="Executing Xalan-xsltc api test: ${testClass}" />
        <property name="testType" value="api." />
        <xalantest test="${testClass}"
            testType="${testType}"
            classpathref="xsltc.compile.class.path"
            fork="${fork-tests}"
            failonerror="${fail-on-error}">
            <!-- Explicitly set TransformerFactory property to use xsltc -->
            <sysproperty key="javax.xml.transform.TransformerFactory" value="org.apache.xalan.xsltc.trax.TransformerFactoryImpl"/>
        </xalantest>
    </target>

</project>
